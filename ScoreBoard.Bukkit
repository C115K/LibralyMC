package com.example.scoreboardplugin;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scoreboard.*;

public class ScoreboardPlugin extends JavaPlugin {

    @Override
    public void onEnable() {
        getLogger().info("Scoreboard Plugin Enabled!");
        // Run this task when the server starts
        Bukkit.getScheduler().runTask(this, this::setupScoreboard);
    }

    private void setupScoreboard() {
        // Create a new scoreboard manager and create the scoreboard
        ScoreboardManager manager = Bukkit.getScoreboardManager();
        if (manager == null) {
            getLogger().warning("Scoreboard manager is null, cannot proceed!");
            return;
        }
        Scoreboard scoreboard = manager.getNewScoreboard();

        // Create an objective (this is what shows in the sidebar)
        Objective objective = scoreboard.registerNewObjective("scoreboard", "dummy", "Player Stats");
        objective.setDisplaySlot(DisplaySlot.SIDEBAR);

        // Set a timer to update the scoreboard every second for all online players
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                updateScoreboard(player, scoreboard);
            }
        }, 0L, 20L); // Updates every 20 ticks (1 second)
    }

    private void updateScoreboard(Player player, Scoreboard scoreboard) {
        // Set the current player's scoreboard
        player.setScoreboard(scoreboard);

        // Get the objective
        Objective objective = scoreboard.getObjective("scoreboard");

        // Clear previous entries in the scoreboard
        objective.getScore("Health:").setScore(0);
        objective.getScore("Ping:").setScore(0);

        // Update the scoreboard with health and ping
        Score healthScore = objective.getScore("Health: " + (int) player.getHealth());
        healthScore.setScore(1);

        Score pingScore = objective.getScore("Ping: " + getPing(player));
        pingScore.setScore(2);
    }

    private int getPing(Player player) {
        // Get the player's ping (response time to the server)
        return ((org.bukkit.craftbukkit.v1_19_R4.entity.CraftPlayer) player).getHandle().ping;
    }
}
